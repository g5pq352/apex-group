"use strict";$(function(){var n=new THREE.WebGLRenderer({antialising:!0,alpha:!1,canvas:void 0}),e=new THREE.Scene,o=new THREE.Clock,t={width:$("#assetWrap").innerWidth,height:$("#assetWrap").innerHeight},i=t.width,t=t.height,v=new THREE.PerspectiveCamera(70,window.innerWidth/window.innerHeight,.001,1e3),r=(v.position.set(0,0,.5),new THREE.Color("#FFFFFF")),i=(n.setPixelRatio(window.devicePixelRatio),n.setSize(i,t),new THREE.PlaneGeometry(3,2,100,100)),s={u_time:{type:"f",value:1},u_resolution:{type:"v2",value:new THREE.Vector2},u_mouse:{type:"v2",value:new THREE.Vector2},u_bg:{value:r},u_color:{value:[new THREE.Color("#F4F3DC"),new THREE.Color("#F4F3DC"),new THREE.Color("#F4F3DC")]}},t=new THREE.ShaderMaterial({uniforms:s,vertexShader:"\n\t\t//\tSimplex 3D Noise\n\t\t//\tby Ian McEwan, Ashima Arts\n\t\t//\n\t\tvec4 permute(vec4 x) {\n\t\t  return mod(((x * 34.0) + 1.0) * x, 289.0);\n\t\t}\n\t\tvec4 taylorInvSqrt(vec4 r) {\n\t\t  return 1.79284291400159 - 0.85373472095314 * r;\n\t\t}\n\n\t\tfloat snoise(vec3 v) {\n\t\t  const vec2 C = vec2(1.0 / 6.0, 1.0 / 3.0);\n\t\t  const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);\n\n\t\t  // First corner\n\t\t  vec3 i = floor(v + dot(v, C.yyy));\n\t\t  vec3 x0 = v - i + dot(i, C.xxx);\n\n\t\t  // Other corners\n\t\t  vec3 g = step(x0.yzx, x0.xyz);\n\t\t  vec3 l = 1.0 - g;\n\t\t  vec3 i1 = min(g.xyz, l.zxy);\n\t\t  vec3 i2 = max(g.xyz, l.zxy);\n\n\t\t  //  x0 = x0 - 0. + 0.0 * C\n\t\t  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n\t\t  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n\t\t  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n\t\t  // Permutations\n\t\t  i = mod(i, 289.0);\n\t\t  vec4 p = permute(permute(permute(\n\t\t        i.z + vec4(0.0, i1.z, i2.z, 1.0)) +\n\t\t      i.y + vec4(0.0, i1.y, i2.y, 1.0)) +\n\t\t    i.x + vec4(0.0, i1.x, i2.x, 1.0));\n\n\t\t  // Gradients\n\t\t  // ( N*N points uniformly over a square, mapped onto an octahedron.)\n\t\t  float n_ = 1.0 / 7.0; // N=7\n\t\t  vec3 ns = n_ * D.wyz - D.xzx;\n\n\t\t  vec4 j = p - 49.0 * floor(p * ns.z * ns.z); //  mod(p,N*N)\n\n\t\t  vec4 x_ = floor(j * ns.z);\n\t\t  vec4 y_ = floor(j - 7.0 * x_); // mod(j,N)\n\n\t\t  vec4 x = x_ * ns.x + ns.yyyy;\n\t\t  vec4 y = y_ * ns.x + ns.yyyy;\n\t\t  vec4 h = 1.0 - abs(x) - abs(y);\n\n\t\t  vec4 b0 = vec4(x.xy, y.xy);\n\t\t  vec4 b1 = vec4(x.zw, y.zw);\n\n\t\t  vec4 s0 = floor(b0) * 2.0 + 1.0;\n\t\t  vec4 s1 = floor(b1) * 2.0 + 1.0;\n\t\t  vec4 sh = -step(h, vec4(0.0));\n\n\t\t  vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n\t\t  vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n\t\t  vec3 p0 = vec3(a0.xy, h.x);\n\t\t  vec3 p1 = vec3(a0.zw, h.y);\n\t\t  vec3 p2 = vec3(a1.xy, h.z);\n\t\t  vec3 p3 = vec3(a1.zw, h.w);\n\n\t\t  //Normalise gradients\n\t\t  vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n\t\t  p0 *= norm.x;\n\t\t  p1 *= norm.y;\n\t\t  p2 *= norm.z;\n\t\t  p3 *= norm.w;\n\n\t\t  // Mix final noise value\n\t\t  vec4 m = max(0.6 - vec4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);\n\t\t  m = m * m;\n\t\t  return 42.0 * dot(m * m, vec4(dot(p0, x0), dot(p1, x1),\n\t\t    dot(p2, x2), dot(p3, x3)));\n\t\t}\n\n\n\t\tuniform float u_time;\n\t\tuniform vec3 u_bg;\n\t\tuniform vec3 u_color[3];\n\n\t\tvarying vec2 v_uv;\n\t\tvarying vec3 v_color;\n\t\tvarying vec3 v_position;\n\n\t\tvoid main() {\n\n\t\t\tvec2 noiseCoord = uv * vec2(3.3, 3.3);\n\n\t\t\tfloat tilt = 0.0 * uv.y;\n\t\t\tfloat incline = 0.0 * uv.x;\n\n\t\t\tfloat noise = snoise(vec3(noiseCoord.x, noiseCoord.y, u_time * 0.1));\n\n\t\t\t// noise = max(0.2, noise);\n\n\t\t\tvec3 pos = vec3( position.x, position.y, position.z + tilt + incline );\n\n\n\t\t\tv_color = u_bg;\n\n\n\t\t\tfor(int i = 0; i < 2; i++){\n\n\n\t\t\t\tfloat noiseFlow = 5.0 + float(i) * 5.3;\n\t\t\t\tfloat noiseFlowy = 3.0 + float(i) * 0.3;\n\t\t\t\tfloat noiseSpeed = 10.0 + float(i) * 0.1;\n\t\t\t\tfloat noiseSeed = 3.0 + float(i) * 10.0;\n\t\t\t\tvec2 noiseFreq = vec2(0.4, 0.3);\n\n\n\t\t\t\tfloat noiseFloor = 0.1;\n\t\t\t\tfloat noiseCeil = 0.6 + float(i) * 0.19;\n\n\n\t\t\t\tfloat noise = smoothstep(noiseFloor, noiseCeil, snoise(vec3(\n\t\t\t\t\tnoiseCoord.x * noiseFreq.x + u_time * 0.002 * noiseFlow,\n\t\t\t\t\tnoiseCoord.y * noiseFreq.y + u_time * 0.003 * noiseFlowy,\n\t\t\t\t\tu_time * 0.008 * noiseSpeed + noiseSeed\n\t\t\t\t)));\n\n\n\t\t\t\tv_color = mix(v_color, u_color[i], noise);\n\n\t\t\t}\n\n\n\t\t\tv_uv = uv;\n\n\t\t  gl_Position = projectionMatrix * modelViewMatrix * vec4( pos, 1.0 );\n\t\t}\n\t",fragmentShader:"\n\t\tuniform vec2 u_resolution;\n\t\tuniform vec2 u_mouse;\n\n\t\tvarying vec2 v_uv;\n\t\tvarying vec3 v_color;\n\t\tvarying vec3 v_position;\n\n\t\tvoid main() {\n\t\t  // vec2 st = gl_FragCoord.xy / u_resolution.xy;\n\n\t\t  gl_FragColor = vec4(v_uv, 0.0, 1.000);\n\t\t  gl_FragColor = vec4(v_color, 1.000);\n\t\t}\n\t"}),r=new THREE.Mesh(i,t);function c(){var t=$("#assetWrap").height();n.setSize(window.innerWidth,t),s.u_resolution.value.x=n.domElement.width,s.u_resolution.value.y=n.domElement.height}e.add(r),document.onmousemove=function(t){s.u_mouse.value.x=t.pageX,s.u_mouse.value.y=t.pageY},window.addEventListener("resize",c,!1),c(),requestAnimationFrame(function t(){s.u_time.value+=o.getDelta(),n.render(e,v),requestAnimationFrame(t)}),document.getElementById("app").appendChild(n.domElement)});
//# sourceMappingURL=shader-asset.js.map
